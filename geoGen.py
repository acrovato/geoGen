#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
## @package GeoGen (CFD basic grid creator)
#
# Create an unstructured tetrahedral grid around a wing
# to be meshed with gmsh for Flow or SU2 CFD solvers
# Adrien Crovato

import wing as w
import tip as t
import wake as wk
import box as b

def main(_module, _output):
    # Get config
    p = getConfig(_module)

    # Create wing, wingtip, wake and bounding box
    wing = w.Wing(p['airfName'], p['span'], p['taper'], p['sweep'], p['dihedral'], p['twist'], p['rootChord'])
    if p['coWingtip']:
        tip = t.CTip(wing)
    else:
        tip = t.RTip(wing)
    wake = wk.Wake(p['xoBox'], p['xfBox'], p['yfBox'], p['nSlope'], wing, tip)
    box = b.Box(p['xoBox'], p['xfBox'], p['yfBox'], p['zoBox'], p['zfBox'], wing, tip, wake)

    # Switch to workspace and write
    createWdir()
    outFile = _output + '.geo'
    # misc
    writeHeader(outFile, _module)
    wing.writeInfo(outFile)
    tip.writeInfo(outFile)
    box.writeInfo(outFile)
    wing.writeOpts(outFile)
    # points
    wing.writePoints(outFile)
    tip.writePoints(outFile)
    wake.writePoints(outFile)
    box.writePoints(outFile)
    # lines
    wing.writeLines(outFile)
    tip.writeLines(outFile)
    wake.writeLines(outFile)
    box.writeLines(outFile)
    # surfaces
    wing.writeSurfaces(outFile)
    tip.writeSurfaces(outFile)
    wake.writeSurfaces(outFile)
    box.writeSurfaces(outFile)
    # volumes
    box.writeVolumes(outFile)
    # physical
    wing.writePhysical(outFile)
    tip.writePhysical(outFile)
    wake.writePhysical(outFile)
    box.writePhysical(outFile)
    # mesh options
    writeOpts(outFile, p['coWingtip'])

    # Printout
    printInfo(outFile)   

    # eof
    print ''

def getConfig(_module):
    # Get prarmeters from config file
    import os, sys, ntpath
    sys.path.append(os.path.abspath(os.path.dirname(_module))) # tmp append module directory to pythonpath
    module = __import__(ntpath.basename(_module)) # import config as module
    p = module.getParams()
    # Fix path
    for i in range(0, len(p['airfName'])):
        p['airfName'][i] = os.path.join(os.path.abspath(os.path.dirname(_module)), p['airfPath'],p['airfName'][i])
    return p

def createWdir():
    import os
    wdir = os.path.join(os.getcwd(), 'workspace')
    if not os.path.isdir(wdir):
        print "creating", wdir
        os.makedirs(wdir)
    os.chdir(wdir)

def writeHeader(fname, _module):
    import ntpath
    file = open(fname, 'w')
    file.write('/******************************************/\n')
    file.write('/* Gmsh geometry for {0:>20s} */\n'.format(ntpath.basename(_module)))
    file.write('/* Generated by      {0:>20s} */\n'.format(ntpath.basename(__file__)))
    file.write('/* Adrien Crovato                         */\n')
    file.write('/* ULiege, 2018-2019                      */\n')
    file.write('/******************************************/\n\n')
    file.close()

def writeOpts(fname, cowtp):
    """Write misc options
    """
    import os
    file = open(fname, 'a')
    file.write('// --- Misc Meshing options ---\n')
    file.write('Mesh.Algorithm = 5; // Delaunay\n')
    if not cowtp:
        file.write('MeshAlgorithm Surface {{73,74}} = 1; // Mesh-adapt\n') # hard-coded, not good
    file.write('Mesh.Algorithm3D = 2; // New Delaunay\n')
    file.write('Mesh.OptimizeNetgen = 1;\n')
    file.write('Mesh.Smoothing = 10;\n')
    file.write('Mesh.SmoothNormals = 1;\n')
    file.write('\n')
    file.close()

def printInfo(fname):
    """Print info
    """
    import os
    print os.path.abspath(os.path.join(os.getcwd(), fname)), 'has been successfully written!'

if __name__ == "__main__":
    # Arguments parser
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', dest='mod', help='input config module (w/o .py)')
    parser.add_argument('-o', dest='out', help='output geo file (w/o .geo)', default='grid')
    args = parser.parse_args()

    main(args.mod, args.out)
