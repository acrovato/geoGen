#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
## @package FPE grid creator
#
# Create a rectangular unstructured tetrahedral grid around a wing
# to be meshed with gmsh for Flow Full Potential solver
# Adrien Crovato

import wing as w
import box as b

def main(_module, _output):
    # Get config
    p = getConfig(_module)

    # Create wing
    wing = w.Wing(p['airfName'], p['span'], p['taper'], p['sweep'], p['dihedral'], p['twist'], p['rootChord'])
    # Create box
    box = b.Box(wing.chord[0], wing.b)
    # Create interfaces

    # Write
    outFile = _output + '.geo'
    writeHeader(outFile, _module)
    wing.writeInfo(outFile)
    wing.writeOpts(outFile)
    box.writeOpts(outFile)
    wing.writePoints(outFile)
    box.writePoints(outFile)

    # Output
    print outFile, 'successfully created!'

    # eof
    print ''

def getConfig(_module):
    # Get prarmeters from config file
    import os, sys, ntpath
    sys.path.append(os.path.abspath(os.path.dirname(_module))) # tmp append module directory to pythonpath
    module = __import__(ntpath.basename(_module)) # import config as module
    p = module.getParams()
    # Fix path
    for i in range(0, len(p['airfName'])):
        p['airfName'][i] = os.path.abspath(os.path.dirname(_module)) + os.sep + p['airfPath'] + os.sep + p['airfName'][i]
    return p

def writeHeader(fname, _module):
    import ntpath
    file = open(fname, 'w')
    file.write('/******************************************/\n')
    file.write('/* Gmsh geometry for {0:>20s} */\n'.format(ntpath.basename(_module)))
    file.write('/* Generated by      {0:>20s} */\n'.format(ntpath.basename(__file__)))
    file.write('/* Adrien Crovato                         */\n')
    file.write('/* ULiege, 2018-2019                      */\n')
    file.write('/******************************************/\n\n')
    file.close()

if __name__ == "__main__":
    # Arguments parser
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', dest='mod', help='input config module (w/o .py)')
    parser.add_argument('-o', dest='out', help='output geo file (w/o .geo)', default='grid')
    args = parser.parse_args()

    main(args.mod, args.out)
